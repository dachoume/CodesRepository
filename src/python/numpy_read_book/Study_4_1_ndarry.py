import numpy as np

# 创建ndarry
# 创建数组最简单的办法就是使用array函数，它接受一切序列型的对象（包括其他数组），
# 然后产生一个新的含有传入数据的Numpy数组
data1 = [4, 5, 6, 8]
arr1 = np.array(data1)
print(arr1)  # [4 5 6 8]

# 嵌套序列（比如一组登场列表组成的列表）将会被转换为一个多维数组
data2 = [[1, 2, 3, 4], [5, 6, 7, 8]]
arr2 = np.array(data2)
print(arr2)  # [[1 2 3 4] [5 6 7 8]]
print(arr2.shape)  # (2, 4)

# 除np.array外，还有一些函数也可以创建数组。
# 比如，zeros和ones分别可以创建指定长度或形状的全0或全1数组。
# empty可以创建一个没有任何具体值的数组
# 要用这些方法创建多维数组，只需传入一个表示形状的元组即可
print(np.zeros(10))  # [ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]
print(np.zeros((3, 6)))
# [[ 0.  0.  0.  0.  0.  0.]
#  [ 0.  0.  0.  0.  0.  0.]
#  [ 0.  0.  0.  0.  0.  0.]]
print(np.empty((2, 3, 2)))
# [[[  6.47747458e-312   6.47711476e-312]
#   [  1.17075153e+214   1.72450502e-071]
#   [  2.87343442e+159   3.92883223e+160]]
#
#  [[  1.16304910e+214   5.50409548e+257]
#   [  5.56206154e+180   8.17434450e+141]
#   [  6.09343068e-013   8.79006526e-313]]]

# arange是Python内置函数range的数组版
print(np.arange(9))  # [0 1 2 3 4 5 6 7 8]

# 由于numpy关注的是数值计算，因此，如果没有特别指定，数据类型基本都是float64（浮点数）

# eye、identity  创建一个正方的N*N单位矩阵（对角线为1，其余为0）

# ============================================================================================
# 可以通过ndarray的astype方法显示地转换其dtype
arr3 = arr2.astype(np.string_)
print(arr3)
# [[b'1' b'2' b'3' b'4']
#  [b'5' b'6' b'7' b'8']]

# ============================================================================================
# 数组与标量之间的运算
# 数组使你不用编写循环即可对数据执行批量运算，这通常就叫做矢量化
# 大小相等的数组之间的任何算术运算都会将运算应用到元素级
arr4 = np.array([[1, 2, 3], [4, 5, 6]])
print(arr4 * arr4)
# [[ 1  4  9]
#  [16 25 36]]
print(arr4 - arr4)
# [[0 0 0]
#  [0 0 0]]

# 同样，数组与标量法人算数运算也会将那个标量值传播到各个元素
print(1 / arr4)
# [[ 1.          0.5         0.33333333]
#  [ 0.25        0.2         0.16666667]]

# ============================================================================================
# 基本的索引和切片

# 当将一个标量值赋值给一个切片时，该值会自动传播到整个选区
arr5 = np.arange(10)  # [0 1 2 3 4 5 6 7 8 9]
arr5[5:7] = 12
print(arr5)  # [ 0  1  2  3  4 12 12  7  8  9]
arr5_slice = arr5[5:7]
arr5_slice[0] = 12345
print(arr5)  # [    0     1     2     3     4 12345    12     7     8     9]

# 二维数组的索引不是标量而是数组
arr6 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(arr6[1, 2])  # 6
print(arr6[1][2])  # 6

# 二维数组的切片索引
print(arr6[:2])
# [[1 2 3]
#  [4 5 6]]
print(arr6[:2, 1:])
# [[2 3]
#  [5 6]]
print(arr6[:2][1:])
# [[4 5 6]]

arr6[arr6 < 5] = 5
print(arr6)
# [[5 5 5]
#  [5 5 6]
#  [7 8 9]]

# ============================================================================================
# 数组转置和轴对换
# 转置是重塑的一种特殊形式，它返回的是源数据的视图（不会进行任何复制操作）。
arr7 = np.arange(15).reshape((3, 5))
print(arr7)
# [[ 0  1  2  3  4]
#  [ 5  6  7  8  9]
#  [10 11 12 13 14]]

print(arr7.T)
# [[ 0  5 10]
#  [ 1  6 11]
#  [ 2  7 12]
#  [ 3  8 13]
#  [ 4  9 14]]



